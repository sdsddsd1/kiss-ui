#!/bin/sh
# A frontend for kiss

# Thanks https://github.com/davidpaulos/XbpsUI for this template.

update () {
        # Command to update the system
        kiss update
}

rebuild () {
    # Declaration of local variables
    local pkg
    local argument_input

    # Selection of packages to install
    # Flags:
        # Multi to be able to pick up multiple packages
        # Exact to match exact match
        # Cycle to enable cycle scroll
        # Preview to show the package description
        # Header and prompt for instructions

    pkg="$(kiss list | fzf -i --multi --exact --no-sort --select-1 --query="$argument_input" \
                    --cycle --reverse --margin="4%,1%,1%,2%" \
                    --inline-info \
                    --preview 'pkg-info {1} '\
                    --preview-window=right:55%:wrap \
                    --header="TAB to (un)select. ENTER to rebuild and install. ESC to quit." \
                    --prompt="filter> " | awk '{ print $1 }'
        )"

        pkg="$(echo "$pkg" | paste -sd " ")"

        if [ -n "$pkg" ]; then
            clear
            kiss b "$pkg" && kiss i "$pkg"
        fi
}

orphans () {
    local pkg
    local argument_input
    pkg="$(kiss-orphans | sort -u |
        fzf -i \
                    --multi \
                    --exact \
                    --no-sort \
                    --select-1 \
                    --query="$argument_input" \
                    --cycle \
                    --reverse \
                    --margin="4%,1%,1%,2%" \
                    --inline-info \
                    --preview 'pkg-info {1} '\
                    --preview-window=right:55%:wrap \
                    --header="TAB to (un)select. ENTER to remove orphans. ESC to quit." \
                    --prompt="filter> " |
                awk '{ print $1 }'
        )"

        pkg="$(echo "$pkg" | paste -sd " ")"

        if [ -n "$pkg" ]; then
            clear
            kiss remove "$pkg"
        fi
}

repo() {
    if [ "$1" = list ]; then
        count=3
        for repo in $(echo "$KISS_PATH" | tr ":" "\n"); do
            count=$((count = count + 1))
            echo "  $count: $repo"
            export "repo_$count"="$repo"
        done

    else
        local pkg
        local argument_input
        repo="$(eval printf '%s' "\${repo_${1}}")"

        if ! [ -d "$repo" ]; then
            return
        fi

        pkg="$(ls "$repo" | sort -u |
            fzf -i \
                        --multi \
                        --exact \
                        --no-sort \
                        --select-1 \
                        --query="$argument_input" \
                        --cycle \
                        --reverse \
                        --margin="4%,1%,1%,2%" \
                        --inline-info \
                        --preview 'pkg-info {1} ' \
                        --preview-window=right:55%:wrap \
                        --header="(Repo: $(echo "$repo" |  awk -F "/" '{ print $NF }')) TAB to (un)select. ENTER to build and install. ESC to quit." \
                        --prompt="filter> " |
                    awk '{ print $1 }'
                )"

                pkg="$(echo "$pkg" | paste -sd " ")"

                if [ -n "$pkg" ]; then
                    clear
                    kiss build "$pkg" && kiss i "$pkg"
                fi

    fi
}

ui () {
while true; do
    clear
    echo
        echo -e "      __   _                       _  "
        echo -e "     / /__(_)_________      __  __(_) "
        echo -e "    / //_/ / ___/ ___/_____/ / / / /  "
        echo -e "   / ,< / (__  |__  )_____/ /_/ / /   "
        echo -e "  /_/|_/_/____/____/      \__,_/_/    "
        echo                              
        echo -e "  \e[7m     $(kiss list | wc -l) packages installed    \e[0m "
        echo
        echo -e "  1: Update"
        echo -e "  2: Check orphans"
        echo -e "  3: Rebuild + list"
        echo
        repo list
        echo
        read -r choice
        choice="$(echo "$choice" | tr '[:upper:]' '[:lower:]')"
        echo
        case "$choice" in
            1|update)
                update
                echo
                echo -e " \e[41m Press ENTER to continue \e[0m"
                read
                ;;

            2|orphans)
                orphans
                echo
                echo -e " \e[41m Press ENTER to continue \e[0m"
                read
                ;;

            3|rebuild)
                rebuild
                echo
                echo -e " \e[41m Press ENTER to continue \e[0m"
                read
                ;;

            0|q|quit|$'\e'|$'\e'$'\e')
                clear && exit
                ;;

            *)
                case "$choice" in
                    *[!0-9]*|'')
                        echo -e " \e[41m Wrong option \e[0m"
                        echo -e "  Please try again..."
                        ;;

                    *)
                        repo "$choice"
                        echo
                        echo -e " \e[41m Press ENTER to continue \e[0m"
                        read
                        ;;
                esac

          esac
          done
}

ui
